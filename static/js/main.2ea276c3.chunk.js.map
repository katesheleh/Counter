{"version":3,"sources":["components/App/App.module.css","components/Counter/CountValue/CountValue.module.css","components/CounterValues/CounterValues.module.css","components/CounterValues/Value/Value.module.css","components/Counter/Counter.module.css","components/Footer/Footer.module.css","components/Footer/SocialLinks/SocialLink/SocialLink.module.css","components/common/Button/Button.module.css","components/Footer/SocialLinks/SocialLinks.module.css","components/common/Button/Button.tsx","components/Counter/CountValue/CountValue.tsx","components/Counter/Counter.tsx","components/CounterValues/Value/Value.tsx","components/CounterValues/CounterValues.tsx","components/Footer/SocialLinks/SocialLink/SocialLink.tsx","components/Footer/SocialLinks/SocialLinks.tsx","components/Footer/Footer.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Button","props","onClick","action","disabled","className","styles","btnDisabled","title","CountValue","value","maxValue","countValue","Counter","counter","count","minValue","counterBtns","setCount","Value","valueBlock","type","onChange","input","CounterValues","useState","inputMinValue","setInputMinValue","inputMaxValue","setInputMaxValue","counterValues","counterValuesInnerWrap","e","Number","currentTarget","counterValuesCol","setMinCountValue","setMaxCountValue","SocialLink","socialLink","link","href","target","rel","SocialLinks","socialLinks","Footer","footer","copyright","App","maxCountValue","minCountValue","appRow","col","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2ea276c3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"appRow\":\"App_appRow__1x0D6\",\"col\":\"App_col__1HBqd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"countValue\":\"CountValue_countValue__oUQGs\",\"disabled\":\"CountValue_disabled__2esdF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterValues\":\"CounterValues_counterValues__2obwS\",\"counterValuesInnerWrap\":\"CounterValues_counterValuesInnerWrap__2kv6z\",\"counterValuesCol\":\"CounterValues_counterValuesCol__ETNLA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Value_title__fzTo3\",\"input\":\"Value_input__1mvPS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__qMmiU\",\"counterBtns\":\"Counter_counterBtns__1zm6u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"copyright\":\"Footer_copyright__3ZxfF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"socialLink\":\"SocialLink_socialLink__33e57\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnDisabled\":\"Button_btnDisabled__3YF1U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"socialLinks\":\"SocialLinks_socialLinks__3ycEA\"};","import React from 'react';\r\nimport styles from './Button.module.css';\r\n\r\ntype ButtonType = {\r\n  title: string;\r\n  action: () => void;\r\n  disabled: boolean;\r\n};\r\n\r\nconst Button = ( props: ButtonType ) => {\r\n  return (\r\n    <button\r\n      onClick={ props.action }\r\n      disabled={ props.disabled }\r\n      className={ props.disabled === true ? `${ styles.btnDisabled }` : '' }\r\n    >\r\n      { props.title }\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport styles from './CountValue.module.css';\r\n\r\ntype CountValue = {\r\n  value: number;\r\n  minValue: number;\r\n  maxValue: number;\r\n};\r\n\r\nconst CountValue = ( props: CountValue ) => {\r\n  return (\r\n    <div className={ props.value === props.maxValue ?\r\n      `${ styles.countValue } ${ styles.disabled }` :\r\n      `${ styles.countValue }` }>\r\n      { props.value }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountValue;","import React from 'react';\r\nimport styles from './Counter.module.css';\r\nimport Button from '../common/Button/Button';\r\nimport CountValue from './CountValue/CountValue';\r\n\r\ntype CounterType = {\r\n  maxValue: number;\r\n  minValue: number;\r\n  count: number;\r\n  setCount: ( value: number ) => void;\r\n};\r\n\r\nconst Counter = ( props: CounterType ) => {\r\n  // init state = 0\r\n\r\n  // Increment Count\r\n  function incrementCount() {\r\n    props.setCount( props.count + 1 );\r\n  }\r\n\r\n  // Increment Count\r\n  function decrementCount() {\r\n    props.setCount( props.count - 1 );\r\n  }\r\n\r\n  // Reset Count\r\n  function resetCount() {\r\n    props.setCount( 0 );\r\n  }\r\n\r\n  return (\r\n    <div className={ styles.counter }>\r\n\r\n      <CountValue value={ props.count } minValue={ props.minValue } maxValue={ props.maxValue } />\r\n\r\n      <div className={ styles.counterBtns }>\r\n        <Button\r\n          title='Increment'\r\n          action={ incrementCount }\r\n          disabled={ props.count === props.maxValue ? true : false } />\r\n\r\n        <Button\r\n          title='Decrement'\r\n          action={ decrementCount }\r\n          disabled={ props.count === props.minValue ? true : false } />\r\n\r\n        <Button\r\n          title='Reset'\r\n          action={ resetCount }\r\n          disabled={ props.count === props.minValue ? true : false } />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Counter;","import React from 'react';\r\nimport styles from './Value.module.css';\r\n\r\ntype ValueType = {\r\n  title: string;\r\n  value: any;\r\n  onChange: any;\r\n};\r\n\r\nconst Value = ( props: ValueType ) => {\r\n\r\n  return (\r\n    <div className={ styles.valueBlock }>\r\n      <p className={ styles.title }>{ props.title }</p>\r\n      <input\r\n        type=\"number\"\r\n        value={ props.value }\r\n        onChange={ props.onChange }\r\n        className={ styles.input } />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Value;","import React, { useState, ChangeEvent } from 'react';\r\nimport styles from './CounterValues.module.css';\r\nimport Button from '../common/Button/Button';\r\nimport Value from './Value/Value';\r\n\r\ntype CounterValuesType = {\r\n  minValue: number;\r\n  maxValue: number;\r\n  setCount: ( value: number ) => void;\r\n  setMinCountValue: ( value: number ) => void;\r\n  setMaxCountValue: ( value: number ) => void;\r\n};\r\nconst CounterValues = ( props: CounterValuesType ) => {\r\n\r\n  // Change min value\r\n  const [ inputMinValue, setInputMinValue ] = useState( props.minValue );\r\n\r\n  const onChangeMinValueHadler = ( e: ChangeEvent<HTMLInputElement> ) => {\r\n    setInputMinValue( Number( e.currentTarget.value ) );\r\n  };\r\n\r\n  // Change max value\r\n  const [ inputMaxValue, setInputMaxValue ] = useState( props.maxValue );\r\n\r\n  const onChangeMaxValueHadler = ( e: ChangeEvent<HTMLInputElement> ) => {\r\n    setInputMaxValue( Number( e.currentTarget.value ) );\r\n  };\r\n\r\n  // Set updated min / max values on Click\r\n  function setNewValues() {\r\n    props.setCount( inputMinValue );\r\n    props.setMinCountValue( inputMinValue );\r\n    props.setMaxCountValue( inputMaxValue );\r\n  }\r\n\r\n  return (\r\n    <div className={ styles.counterValues }>\r\n\r\n      <div className={ styles.counterValuesInnerWrap }>\r\n        <Value\r\n          title='Min value'\r\n          value={ inputMinValue }\r\n          onChange={ onChangeMinValueHadler } />\r\n\r\n        <Value\r\n          title='Max value'\r\n          value={ inputMaxValue }\r\n          onChange={ onChangeMaxValueHadler } />\r\n      </div>\r\n\r\n      <div className={ styles.counterValuesCol }>\r\n        <Button\r\n          title='Set'\r\n          action={ setNewValues }\r\n          disabled={ false } />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CounterValues;","import React from 'react';\r\nimport styles from './SocialLink.module.css';\r\n\r\ntype SocialLinkType = {\r\n  link: string,\r\n  title: string\r\n}\r\n\r\nconst SocialLink = (props: SocialLinkType) => {\r\n  return (\r\n    <div className={styles.socialLink}>\r\n      <a className={styles.link} href={props.link} target=\"_blank\" rel=\"noopener noreferrer\">{props.title}</a>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SocialLink;","import React from 'react';\r\nimport styles from './SocialLinks.module.css';\r\nimport SocialLink from './SocialLink/SocialLink';\r\n\r\nconst SocialLinks = () => {\r\n  return (\r\n    <section className={styles.socialLinks}>\r\n      <SocialLink link={\"https://www.linkedin.com/in/katesheleh/\"} title=\"Linkedin\" />\r\n      <SocialLink link={\"https://github.com/katesheleh\"} title=\"Github\" />\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default SocialLinks;","import React from 'react';\r\nimport styles from './Footer.module.css';\r\nimport SocialLinks from './SocialLinks/SocialLinks';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className={styles.footer}>\r\n      <p className={styles.copyright}>© created by Katia Sheleh</p>\r\n      <SocialLinks />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer;","import React, { useState } from 'react';\nimport styles from './App.module.css';\nimport Counter from '../Counter/Counter';\nimport CounterValues from '../CounterValues/CounterValues';\nimport Footer from '../Footer/Footer';\n\nfunction App() {\n\n  const [ maxCountValue, setMaxCountValue ] = useState( 5 );\n  const [ minCountValue, setMinCountValue ] = useState( 0 );\n  const [ count, setCount ] = useState( minCountValue );\n\n  return (\n\n    <div className=\"App\">\n      <h1>Counter</h1>\n\n      <div className={ styles.appRow }>\n\n        <div className={ styles.col }>\n          <CounterValues\n            minValue={ minCountValue }\n            maxValue={ maxCountValue }\n            setCount={ setCount }\n            setMinCountValue={ setMinCountValue }\n            setMaxCountValue={ setMaxCountValue } />\n        </div>\n\n        <div className={ styles.col }>\n          <Counter\n            minValue={ minCountValue }\n            maxValue={ maxCountValue }\n            count={ count }\n            setCount={ setCount } />\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}