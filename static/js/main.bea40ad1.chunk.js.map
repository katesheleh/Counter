{"version":3,"sources":["components/Counter/CountValue/CountValue.module.css","components/CounterValues/Value/Value.module.css","components/App/App.module.css","components/CounterValues/CounterValues.module.css","components/Counter/Counter.module.css","components/Footer/Footer.module.css","components/Footer/SocialLinks/SocialLink/SocialLink.module.css","components/common/Button/Button.module.css","components/Footer/SocialLinks/SocialLinks.module.css","components/common/Button/Button.tsx","components/Counter/CountValue/CountValue.tsx","components/Counter/Counter.tsx","components/CounterValues/Value/Value.tsx","components/CounterValues/CounterValues.tsx","components/Footer/SocialLinks/SocialLink/SocialLink.tsx","components/Footer/SocialLinks/SocialLinks.tsx","components/Footer/Footer.tsx","state/counter-reducer.ts","components/App/App.tsx","serviceWorker.ts","state/store.ts","index.tsx"],"names":["module","exports","Button","props","onClick","action","disabled","className","styles","btnDisabled","title","CountValue","value","maxValue","countValue","minValue","startText","warningText","Counter","counter","count","counterBtns","incrementCount","decrementCount","resetCount","Value","valueBlock","type","onChange","equal","input","CounterValues","inputMinValue","inputMaxValue","useState","equalValue","setEqualValue","counterValues","counterValuesInnerWrap","e","currentTarget","setMinCountValue","setCount","setMaxCountValue","counterValuesCol","SocialLink","socialLink","link","href","target","rel","SocialLinks","socialLinks","Footer","footer","copyright","initialState","startMinValue","startMaxValue","App","useSelector","state","dispatch","useDispatch","appRow","col","Boolean","window","location","hostname","match","RootReducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bea40ad1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"countValue\":\"CountValue_countValue__oUQGs\",\"disabled\":\"CountValue_disabled__2esdF\",\"warningText\":\"CountValue_warningText__1hMUu\",\"startText\":\"CountValue_startText__3CsfK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Value_title__fzTo3\",\"input\":\"Value_input__1mvPS\",\"equal\":\"Value_equal__NVAEi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appRow\":\"App_appRow__1x0D6\",\"col\":\"App_col__1HBqd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterValues\":\"CounterValues_counterValues__2obwS\",\"counterValuesInnerWrap\":\"CounterValues_counterValuesInnerWrap__2kv6z\",\"counterValuesCol\":\"CounterValues_counterValuesCol__ETNLA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__qMmiU\",\"counterBtns\":\"Counter_counterBtns__1zm6u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"copyright\":\"Footer_copyright__3ZxfF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"socialLink\":\"SocialLink_socialLink__33e57\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnDisabled\":\"Button_btnDisabled__3YF1U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"socialLinks\":\"SocialLinks_socialLinks__3ycEA\"};","import React from 'react';\r\nimport styles from './Button.module.css';\r\n\r\ntype ButtonType = {\r\n\ttitle: string;\r\n\taction: () => void;\r\n\tdisabled: boolean;\r\n};\r\n\r\nconst Button = (props: ButtonType) => {\r\n\treturn (\r\n\t\t\t<button\r\n\t\t\t\t\tonClick={props.action}\r\n\t\t\t\t\tdisabled={props.disabled}\r\n\t\t\t\t\tclassName={props.disabled === true ? `${styles.btnDisabled}` : ''}\r\n\t\t\t>\r\n\t\t\t\t{props.title}\r\n\t\t\t</button>\r\n\t);\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport styles from './CountValue.module.css';\r\n\r\ntype CountValue = {\r\n  value: number;\r\n  minValue: number;\r\n  maxValue: number;\r\n};\r\n\r\nconst CountValue = ( props: CountValue ) => {\r\n  return (\r\n    <div className={ props.value === props.maxValue ?\r\n      `${ styles.countValue } ${ styles.disabled }` :\r\n      `${ styles.countValue }` }\r\n    >\r\n      {\r\n        ( props.minValue ) === props.maxValue\r\n          ? <p className={ styles.startText }>Enter correct values and press \"Set\".</p>\r\n\r\n          : ( props.minValue > props.maxValue\r\n            ? <p className={ styles.warningText }>Min value can't be more than Max value</p>\r\n            : props.value\r\n          )\r\n      }\r\n\r\n    </div >\r\n  );\r\n};\r\n\r\nexport default CountValue;","import React from 'react';\r\nimport styles from './Counter.module.css';\r\nimport Button from '../common/Button/Button';\r\nimport CountValue from './CountValue/CountValue';\r\n\r\ntype CounterType = {\r\n\tmaxValue: number;\r\n\tminValue: number;\r\n\tcount: number;\r\n\tincrementCount: () => void;\r\n\tdecrementCount: () => void;\r\n\tresetCount: (value: number) => void;\r\n};\r\n\r\nconst Counter = (props: CounterType) => {\r\n\treturn (\r\n\t\t\t<div className={styles.counter}>\r\n\r\n\t\t\t\t<CountValue\r\n\t\t\t\t\t\tvalue={props.count}\r\n\t\t\t\t\t\tminValue={props.minValue}\r\n\t\t\t\t\t\tmaxValue={props.maxValue}/>\r\n\r\n\t\t\t\t<div className={styles.counterBtns}>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\ttitle='Increment'\r\n\t\t\t\t\t\t\taction={props.incrementCount}\r\n\t\t\t\t\t\t\tdisabled={props.count === props.maxValue || props.minValue > props.maxValue ? true : false}/>\r\n\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\ttitle='Decrement'\r\n\t\t\t\t\t\t\taction={props.decrementCount}\r\n\t\t\t\t\t\t\tdisabled={props.count === props.minValue ? true : false}/>\r\n\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\ttitle='Reset'\r\n\t\t\t\t\t\t\taction={() => props.resetCount(props.minValue)}\r\n\t\t\t\t\t\t\tdisabled={props.count === props.minValue ? true : false}/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Counter;","import React from 'react';\r\nimport styles from './Value.module.css';\r\n\r\ntype ValueType = {\r\n  title: string;\r\n  value: any;\r\n  onChange: any;\r\n  equal: boolean;\r\n};\r\n\r\nconst Value = ( props: ValueType ) => {\r\n\r\n  return (\r\n    <div className={ styles.valueBlock }>\r\n      <p className={ styles.title }>{ props.title }</p>\r\n      <input\r\n        type=\"number\"\r\n        value={ props.value }\r\n        onChange={ props.onChange }\r\n        className={ props.equal\r\n          ? `${ styles.input } ${ styles.equal }`\r\n          : `${ styles.input } ` } />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Value;","import React, {useState, ChangeEvent} from 'react';\r\nimport styles from './CounterValues.module.css';\r\nimport Button from '../common/Button/Button';\r\nimport Value from './Value/Value';\r\n\r\ntype CounterValuesType = {\r\n\tminValue: number;\r\n\tmaxValue: number;\r\n\tsetCount: (value: number) => void;\r\n\tsetMinCountValue: (value: number) => void;\r\n\tsetMaxCountValue: (value: number) => void;\r\n};\r\n\r\nconst CounterValues = (props: CounterValuesType) => {\r\n\tconst {minValue: inputMinValue, maxValue: inputMaxValue} = props\r\n\r\n\tconst [equalValue, setEqualValue] = useState(inputMinValue >= inputMaxValue);\r\n\r\n\tconst onChangeMinValueHadler = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tif (+e.currentTarget.value >= inputMaxValue) {\r\n\t\t\tsetEqualValue(true);\r\n\t\t} else {\r\n\t\t\tsetEqualValue(false);\r\n\t\t}\r\n\t\tprops.setMinCountValue(+e.currentTarget.value);\r\n\t\tprops.setCount(inputMinValue);\r\n\t};\r\n\r\n\tconst onChangeMaxValueHadler = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tif (+e.currentTarget.value === inputMinValue) {\r\n\t\t\tsetEqualValue(true);\r\n\t\t} else {\r\n\t\t\tsetEqualValue(false);\r\n\t\t}\r\n\t\tprops.setMaxCountValue(+e.currentTarget.value);\r\n\t\tprops.setCount(inputMinValue);\r\n\t};\r\n\r\n\t// Set updated min / max values on Click\r\n\tfunction setNewValues() {\r\n\t\tprops.setCount(inputMinValue);\r\n\t\tprops.setMinCountValue(inputMinValue);\r\n\t\tprops.setMaxCountValue(inputMaxValue);\r\n\t}\r\n\r\n\treturn (\r\n\t\t\t<div className={styles.counterValues}>\r\n\r\n\t\t\t\t<div className={styles.counterValuesInnerWrap}>\r\n\t\t\t\t\t<Value\r\n\t\t\t\t\t\t\ttitle='Min value'\r\n\t\t\t\t\t\t\tvalue={inputMinValue}\r\n\t\t\t\t\t\t\tonChange={onChangeMinValueHadler}\r\n\t\t\t\t\t\t\tequal={equalValue}/>\r\n\r\n\t\t\t\t\t<Value\r\n\t\t\t\t\t\t\ttitle='Max value'\r\n\t\t\t\t\t\t\tvalue={inputMaxValue}\r\n\t\t\t\t\t\t\tonChange={onChangeMaxValueHadler}\r\n\t\t\t\t\t\t\tequal={equalValue}/>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className={styles.counterValuesCol}>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\ttitle='Set'\r\n\t\t\t\t\t\t\taction={setNewValues}\r\n\t\t\t\t\t\t\tdisabled={equalValue}/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CounterValues;","import React from 'react';\r\nimport styles from './SocialLink.module.css';\r\n\r\ntype SocialLinkType = {\r\n  link: string,\r\n  title: string\r\n}\r\n\r\nconst SocialLink = (props: SocialLinkType) => {\r\n  return (\r\n    <div className={styles.socialLink}>\r\n      <a className={styles.link} href={props.link} target=\"_blank\" rel=\"noopener noreferrer\">{props.title}</a>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SocialLink;","import React from 'react';\r\nimport styles from './SocialLinks.module.css';\r\nimport SocialLink from './SocialLink/SocialLink';\r\n\r\nconst SocialLinks = () => {\r\n  return (\r\n    <section className={styles.socialLinks}>\r\n      <SocialLink link={\"https://www.linkedin.com/in/katesheleh/\"} title=\"Linkedin\" />\r\n      <SocialLink link={\"https://github.com/katesheleh\"} title=\"Github\" />\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default SocialLinks;","import React from 'react';\r\nimport styles from './Footer.module.css';\r\nimport SocialLinks from './SocialLinks/SocialLinks';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className={styles.footer}>\r\n      <p className={styles.copyright}>© created by Katia Sheleh</p>\r\n      <SocialLinks />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer;","export type StateType = {\r\n\tstartMinValue: number\r\n\tstartMaxValue: number,\r\n\tcount: number\r\n}\r\n\r\nexport type SetMinCountValueType = {\r\n\ttype: 'SET_MIN_START_VALUE'\r\n\tstartMinValue: number\r\n}\r\n\r\nexport type SetMaxCountValueType = {\r\n\ttype: 'SET_MAX_START_VALUE'\r\n\tstartMaxValue: number\r\n}\r\n\r\nexport type IncrementCountType = {\r\n\ttype: 'INCREMENT_COUNT'\r\n}\r\n\r\nexport type DecrementCountType = {\r\n\ttype: 'DECREMENT_COUNT'\r\n}\r\n\r\nexport type SetCountType = {\r\n\ttype: 'SET_COUNT'\r\n\tcount: number\r\n}\r\n\r\nexport type ResetCountType = {\r\n\ttype: 'RESET_COUNT'\r\n\tcount: number\r\n}\r\n\r\ntype ActionType = SetMinCountValueType | SetMaxCountValueType\r\n\t\t| SetCountType | IncrementCountType | DecrementCountType | ResetCountType\r\n\r\nexport let initialState: StateType = {\r\n\tstartMinValue: 0,\r\n\tstartMaxValue: 0,\r\n\tcount: 0\r\n}\r\n\r\nexport const counterValuesReducer = (state = initialState, action: ActionType): StateType => {\r\n\tswitch (action.type) {\r\n\t\tcase 'SET_MIN_START_VALUE':\r\n\t\t\treturn {...state, startMinValue: action.startMinValue};\r\n\r\n\t\tcase 'SET_MAX_START_VALUE':\r\n\t\t\treturn {...state, startMaxValue: action.startMaxValue};\r\n\r\n\t\tcase 'INCREMENT_COUNT':\r\n\t\t\treturn {...state, count: state.count + 1};\r\n\r\n\t\tcase 'DECREMENT_COUNT':\r\n\t\t\treturn {...state, count: state.count - 1};\r\n\r\n\t\tcase 'RESET_COUNT':\r\n\t\t\treturn {...state, count: action.count};\r\n\r\n\t\tcase 'SET_COUNT' :\r\n\t\t\treturn {...state, count: action.count};\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport const SetMinCountValueAC = (startMinValue: number): SetMinCountValueType => {\r\n\treturn {type: 'SET_MIN_START_VALUE', startMinValue: startMinValue}\r\n}\r\n\r\nexport const SetMaxCountValueAC = (startMaxValue: number): SetMaxCountValueType => {\r\n\treturn {type: 'SET_MAX_START_VALUE', startMaxValue: startMaxValue}\r\n}\r\n\r\nexport const incrementCountAC = (): IncrementCountType => {\r\n\treturn {type: 'INCREMENT_COUNT'}\r\n}\r\n\r\nexport const decrementCountAC = (): DecrementCountType => {\r\n\treturn {type: 'DECREMENT_COUNT'}\r\n}\r\n\r\nexport const resetCountAC = (count: number): ResetCountType => {\r\n\treturn {type: 'RESET_COUNT', count: count}\r\n}\r\n\r\nexport const setCountAC = (count: number): SetCountType => {\r\n\treturn {type: 'SET_COUNT', count: count}\r\n}\r\n","import React from 'react';\nimport styles from './App.module.css';\nimport Counter from '../Counter/Counter';\nimport CounterValues from '../CounterValues/CounterValues';\nimport Footer from '../Footer/Footer';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppRootStateType} from '../../state/store';\nimport {\n\tSetMaxCountValueAC, SetMinCountValueAC, StateType, decrementCountAC,\n\tincrementCountAC, resetCountAC, setCountAC\n} from '../../state/counter-reducer';\n\n\nfunction App() {\n\tlet counterValues = useSelector<AppRootStateType, StateType>(state => state.counterValues)\n\tlet dispatch = useDispatch()\n\n\tconst setMinCountValue = (value: number) => {\n\t\tdispatch(SetMinCountValueAC(value))\n\t}\n\n\tconst setMaxCountValue = (value: number) => {\n\t\tdispatch(SetMaxCountValueAC(value))\n\t}\n\n\tconst setCount = (value: number) => {\n\t\tdispatch(setCountAC(value))\n\t}\n\n\tconst incrementCount = () => {\n\t\tdispatch(incrementCountAC())\n\t}\n\n\tconst decrementCount = () => {\n\t\tdispatch(decrementCountAC())\n\t}\n\n\tconst resetCount = (value: number) => {\n\t\tdispatch(resetCountAC(value))\n\t}\n\n\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>Counter</h1>\n\n\t\t\t\t<div className={styles.appRow}>\n\n\t\t\t\t\t<div className={styles.col}>\n\t\t\t\t\t\t<CounterValues\n\t\t\t\t\t\t\t\tminValue={counterValues.startMinValue}\n\t\t\t\t\t\t\t\tmaxValue={counterValues.startMaxValue}\n\t\t\t\t\t\t\t\tsetCount={setCount}\n\t\t\t\t\t\t\t\tsetMinCountValue={setMinCountValue}\n\t\t\t\t\t\t\t\tsetMaxCountValue={setMaxCountValue}/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className={styles.col}>\n\t\t\t\t\t\t<Counter\n\t\t\t\t\t\t\t\tminValue={counterValues.startMinValue}\n\t\t\t\t\t\t\t\tmaxValue={counterValues.startMaxValue}\n\t\t\t\t\t\t\t\tcount={counterValues.count}\n\t\t\t\t\t\t\t\tincrementCount={incrementCount}\n\t\t\t\t\t\t\t\tdecrementCount={decrementCount}\n\t\t\t\t\t\t\t\tresetCount={resetCount}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<Footer/>\n\t\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from 'redux';\r\nimport {counterValuesReducer} from './counter-reducer';\r\n\r\nconst RootReducer = combineReducers({\r\n\tcounterValues: counterValuesReducer,\r\n})\r\n\r\nexport const store = createStore(RootReducer)\r\n\r\nexport type AppRootStateType = ReturnType<typeof RootReducer>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {store} from './state/store';\n\nReactDOM.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>,\n    <Provider store={store}>\n      <App/>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}