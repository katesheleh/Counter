{"version":3,"sources":["components/Counter/CountValue/CountValue.module.css","components/Counter/Counter.module.css","components/Footer/Footer.module.css","components/Footer/SocialLinks/SocialLink/SocialLink.module.css","components/Counter/Button/Button.module.css","components/Footer/SocialLinks/SocialLinks.module.css","components/Counter/Button/Button.tsx","components/Counter/CountValue/CountValue.tsx","components/Counter/Counter.tsx","components/Footer/SocialLinks/SocialLink/SocialLink.tsx","components/Footer/SocialLinks/SocialLinks.tsx","components/Footer/Footer.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Button","props","onClick","action","disabled","className","styles","btnDisabled","title","CountValue","value","maxCountValue","countValue","Counter","counter","count","counterBtns","incrementCount","decrementCount","resetCount","SocialLink","socialLink","link","href","target","rel","SocialLinks","socialLinks","Footer","footer","copyright","App","useState","setCount","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,WAAa,+BAA+B,SAAW,+B,gBCAzED,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,+B,gBCAnED,EAAOC,QAAU,CAAC,UAAY,4B,gBCA9BD,EAAOC,QAAU,CAAC,WAAa,iC,kBCA/BD,EAAOC,QAAU,CAAC,YAAc,8B,gBCAhCD,EAAOC,QAAU,CAAC,YAAc,mC,yMCoBjBC,EAZA,SAACC,GACd,OACE,4BACEC,QAASD,EAAME,OACfC,SAAUH,EAAMG,SAChBC,WAA8B,IAAnBJ,EAAMG,SAAN,UAA6BE,IAAOC,aAAgB,IAE9DN,EAAMO,Q,gBCEEC,EAVI,SAACR,GAClB,OACE,yBAAKI,UAAWJ,EAAMS,QAAUC,EAAhB,UACXL,IAAOM,WADI,YACUN,IAAOF,UADjB,UAEXE,IAAOM,aACTX,EAAMS,QCDAC,EAAgB,EA6BdE,EA1BC,SAACZ,GACf,OACE,yBAAKI,UAAWC,IAAOQ,SAErB,kBAAC,EAAD,CAAYJ,MAAOT,EAAMc,QAEzB,yBAAKV,UAAWC,IAAOU,aACrB,kBAAC,EAAD,CACER,MAAM,YACNL,OAAQF,EAAMgB,eACdb,SAAUH,EAAMc,QAAUJ,IAE5B,kBAAC,EAAD,CACEH,MAAM,YACNL,OAAQF,EAAMiB,eACdd,SAjBmB,IAiBTH,EAAMc,QAElB,kBAAC,EAAD,CACEP,MAAM,QACNL,OAAQF,EAAMkB,WACdf,SAtBmB,IAsBTH,EAAMc,W,gDCnBXK,EARI,SAACnB,GAClB,OACE,yBAAKI,UAAWC,IAAOe,YACrB,uBAAGhB,UAAWC,IAAOgB,KAAMC,KAAMtB,EAAMqB,KAAME,OAAO,SAASC,IAAI,uBAAuBxB,EAAMO,SCErFkB,EATK,WAClB,OACE,6BAASrB,UAAWC,IAAOqB,aACzB,kBAAC,EAAD,CAAYL,KAAM,0CAA2Cd,MAAM,aACnE,kBAAC,EAAD,CAAYc,KAAM,gCAAiCd,MAAM,aCKhDoB,EATA,WACb,OACE,yBAAKvB,UAAWC,IAAOuB,QACrB,uBAAGxB,UAAWC,IAAOwB,WAArB,gCACA,kBAAC,EAAD,QC8BSC,MAhCf,WAAe,MAEaC,mBAAS,GAFtB,mBAENjB,EAFM,KAECkB,EAFD,KAmBb,OACE,yBAAK5B,UAAU,OACb,uCAAY,4CACZ,kBAAC,EAAD,CACEU,MAAOA,EACPE,eAnBN,WACEgB,EAASlB,EAAQ,IAmBbG,eAfN,WACEe,EAASlB,EAAQ,IAebI,WAXN,WACEc,EAAS,MAWP,kBAAC,EAAD,QCrBcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fdf7d6e1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"countValue\":\"CountValue_countValue__oUQGs\",\"disabled\":\"CountValue_disabled__2esdF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__qMmiU\",\"counterBtns\":\"Counter_counterBtns__1zm6u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"copyright\":\"Footer_copyright__3ZxfF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"socialLink\":\"SocialLink_socialLink__33e57\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnDisabled\":\"Button_btnDisabled__326fT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"socialLinks\":\"SocialLinks_socialLinks__3ycEA\"};","import React from 'react'\r\nimport styles from './Button.module.css'\r\n\r\ntype ButtonType = {\r\n  title: string\r\n  action: () => void\r\n  disabled: boolean\r\n}\r\n\r\nconst Button = (props: ButtonType) => {\r\n  return (\r\n    <button\r\n      onClick={props.action}\r\n      disabled={props.disabled}\r\n      className={props.disabled === true ? `${styles.btnDisabled}` : ''}\r\n    >\r\n      {props.title}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport styles from './CountValue.module.css';\r\nimport { maxCountValue } from '../Counter';\r\n\r\ntype CountValue = {\r\n  value: number\r\n}\r\n\r\nconst CountValue = (props: CountValue) => {\r\n  return (\r\n    <div className={props.value === maxCountValue ?\r\n      `${styles.countValue} ${styles.disabled}` :\r\n      `${styles.countValue}`}>\r\n      {props.value}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CountValue;","import React from 'react';\r\nimport styles from './Counter.module.css';\r\nimport Button from './Button/Button';\r\nimport CountValue from './CountValue/CountValue';\r\n\r\ntype CounterType = {\r\n  count: number\r\n  incrementCount: () => void\r\n  decrementCount: () => void\r\n  resetCount: () => void\r\n}\r\n\r\nexport const maxCountValue = 5;\r\nexport const minCountValue = 0;\r\n\r\nconst Counter = (props: CounterType) => {\r\n  return (\r\n    <div className={styles.counter}>\r\n\r\n      <CountValue value={props.count} />\r\n\r\n      <div className={styles.counterBtns}>\r\n        <Button\r\n          title='Increment'\r\n          action={props.incrementCount}\r\n          disabled={props.count === maxCountValue ? true : false} />\r\n\r\n        <Button\r\n          title='Decrement'\r\n          action={props.decrementCount}\r\n          disabled={props.count === minCountValue ? true : false} />\r\n\r\n        <Button\r\n          title='Reset'\r\n          action={props.resetCount}\r\n          disabled={props.count === minCountValue ? true : false} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Counter;","import React from 'react';\r\nimport styles from './SocialLink.module.css';\r\n\r\ntype SocialLinkType = {\r\n  link: string,\r\n  title: string\r\n}\r\n\r\nconst SocialLink = (props: SocialLinkType) => {\r\n  return (\r\n    <div className={styles.socialLink}>\r\n      <a className={styles.link} href={props.link} target=\"_blank\" rel=\"noopener noreferrer\">{props.title}</a>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SocialLink;","import React from 'react';\r\nimport styles from './SocialLinks.module.css';\r\nimport SocialLink from './SocialLink/SocialLink';\r\n\r\nconst SocialLinks = () => {\r\n  return (\r\n    <section className={styles.socialLinks}>\r\n      <SocialLink link={\"https://www.linkedin.com/in/katesheleh/\"} title=\"Linkedin\" />\r\n      <SocialLink link={\"https://github.com/katesheleh\"} title=\"Github\" />\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default SocialLinks;","import React from 'react';\r\nimport styles from './Footer.module.css';\r\nimport SocialLinks from './SocialLinks/SocialLinks';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className={styles.footer}>\r\n      <p className={styles.copyright}>Â© created by Katia Sheleh</p>\r\n      <SocialLinks />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer;","import React, { useState } from 'react';\nimport './App.module.css';\nimport Counter from '../Counter/Counter';\nimport Footer from '../Footer/Footer';\n\n\nfunction App() {\n  // init state = 0\n  const [count, setCount] = useState(0);\n\n  // Increment Count\n  function incrementCount() {\n    setCount(count + 1)\n  }\n\n  // Increment Count\n  function decrementCount() {\n    setCount(count - 1)\n  }\n\n  // Reset Count\n  function resetCount() {\n    setCount(0)\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Counter <span>(until 5)</span></h1>\n      <Counter\n        count={count}\n        incrementCount={incrementCount}\n        decrementCount={decrementCount}\n        resetCount={resetCount} />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}